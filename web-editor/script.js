// üõ†Ô∏è Luna TVÈÖçÁΩÆÁºñËæëÂô® - ÂÆåÊï¥‰øÆÂ§çÁâàÔºàÁúüÂÆûCDNÔºâ
// ‰øÆÂ§çÊâÄÊúâCDN 404ÈîôËØØ + ÈîÆÁõò‰∫ã‰ª∂ÂÖºÂÆπÊÄßÈóÆÈ¢ò + ÈÄíÂΩíÈîôËØØ

// üõ†Ô∏è ÈîÆÁõò‰∫ã‰ª∂ÂÖºÂÆπÊÄß‰øÆÂ§ç - ÂøÖÈ°ªÂú®MonacoÂä†ËΩΩÂâçÊâßË°å
function fixKeyboardEventCompatibility() {
    if (typeof KeyboardEvent !== 'undefined' && KeyboardEvent.prototype) {
        const originalGetModifierState = KeyboardEvent.prototype.getModifierState;
        
        if (!originalGetModifierState || typeof originalGetModifierState !== 'function') {
            KeyboardEvent.prototype.getModifierState = function(keyArg) {
                console.log(`[ÂÖºÂÆπÊÄß‰øÆÂ§ç] Ë∞ÉÁî®getModifierState(${keyArg})`);
                
                // Âü∫Êú¨ÁöÑ‰øÆÈ•∞ÈîÆÊ£ÄÊµã
                switch (keyArg) {
                    case 'Control':
                    case 'Ctrl':
                        return this.ctrlKey || false;
                    case 'Shift':
                        return this.shiftKey || false;
                    case 'Alt':
                        return this.altKey || false;
                    case 'Meta':
                        return this.metaKey || false;
                    case 'CapsLock':
                        return false; // ÁÆÄÂåñÂ§ÑÁêÜ
                    case 'NumLock':
                        return false; // ÁÆÄÂåñÂ§ÑÁêÜ
                    case 'ScrollLock':
                        return false; // ÁÆÄÂåñÂ§ÑÁêÜ
                    default:
                        return false;
                }
            };
            
            console.log('‚úÖ ÈîÆÁõò‰∫ã‰ª∂ÂÖºÂÆπÊÄßË°•‰∏ÅÂ∑≤Â∫îÁî®');
        }
    }
}

// Á´ãÂç≥ÊâßË°åÂÖºÂÆπÊÄß‰øÆÂ§ç
fixKeyboardEventCompatibility();

// ÂÖ®Â±ÄÂèòÈáè
let editor;
let currentConfig = '';
let githubToken = '';
let currentSha = '';
let editorLoaded = false;
let isTokenVisible = false;

// GitHubÈÖçÁΩÆ
const GITHUB_CONFIG = {
    owner: 'qianqikun',
    repo: 'LunaTV-config',
    path: 'LunaTV-config.json',
    branch: 'main'
};

// JSONÈîôËØØ‰ø°ÊÅØ‰∏≠ÊñáÊò†Â∞Ñ
const JSON_ERROR_TRANSLATIONS = {
    'Unexpected token': 'ÊÑèÂ§ñÁöÑÊ†áËÆ∞',
    'Unexpected end of JSON input': 'JSONËæìÂÖ•ÊÑèÂ§ñÁªìÊùü',
    'Expected property name': 'È¢ÑÊúüÂ±ûÊÄßÂêçÁß∞',
    'Expected': 'È¢ÑÊúü',
    'or': 'Êàñ',
    'after': 'Âú®...‰πãÂêé',
    'before': 'Âú®...‰πãÂâç',
    'at position': 'Âú®‰ΩçÁΩÆ',
    'line': 'Á¨¨',
    'column': 'Âàó',
    'Invalid': 'Êó†ÊïàÁöÑ',
    'Missing': 'Áº∫Â∞ë',
    'Unterminated string': 'Êú™ÁªìÊùüÁöÑÂ≠óÁ¨¶‰∏≤',
    'Trailing comma': 'Â§ö‰ΩôÁöÑÈÄóÂè∑',
    'Duplicate key': 'ÈáçÂ§çÁöÑÈîÆ'
};

// Â∑•ÂÖ∑Á±ª
class Utils {
    static decodeBase64Unicode(str) {
        try {
            const bytes = Uint8Array.from(atob(str.replace(/\s/g, '')), c => c.charCodeAt(0));
            return new TextDecoder('utf-8').decode(bytes);
        } catch (error) {
            console.error('UTF-8Ëß£Á†ÅÂ§±Ë¥•:', error);
            return decodeURIComponent(escape(atob(str)));
        }
    }
    
    static encodeBase64Unicode(str) {
        try {
            const encoder = new TextEncoder();
            const bytes = encoder.encode(str);
            return btoa(String.fromCharCode(...bytes));
        } catch (error) {
            console.error('UTF-8ÁºñÁ†ÅÂ§±Ë¥•:', error);
            return btoa(unescape(encodeURIComponent(str)));
        }
    }
    
    static translateJsonError(error) {
        let message = error.message;
        
        Object.entries(JSON_ERROR_TRANSLATIONS).forEach(([en, zh]) => {
            message = message.replace(new RegExp(en, 'gi'), zh);
        });
        
        message = message.replace(/at position (\d+)/gi, 'Âú®‰ΩçÁΩÆ $1');
        message = message.replace(/line (\d+)/gi, 'Á¨¨$1Ë°å');
        message = message.replace(/column (\d+)/gi, 'Á¨¨$1Âàó');
        
        return message;
    }
    
    static formatFileSize(bytes) {
        if (bytes === 0) return '0 B';
        const k = 1024;
        const sizes = ['B', 'KB', 'MB', 'GB'];
        const i = Math.floor(Math.log(bytes) / Math.log(k));
        return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
    }
    
    static getTimestamp() {
        return new Date().toLocaleString('zh-CN', {
            timeZone: 'Asia/Shanghai',
            year: 'numeric',
            month: '2-digit',
            day: '2-digit',
            hour: '2-digit',
            minute: '2-digit',
            second: '2-digit'
        });
    }
}

// Ê∂àÊÅØÁÆ°ÁêÜÁ±ª
class MessageManager {
    static show(message, type = 'info', duration = 3000) {
        const toast = document.getElementById('message-toast');
        if (toast) {
            toast.textContent = message;
            toast.className = `message-toast ${type} show`;
            
            setTimeout(() => {
                toast.classList.remove('show');
            }, duration);
        } else {
            console.log(`[${type}] ${message}`);
        }
    }
    
    static confirm(message, callback) {
        const modal = document.getElementById('confirm-dialog');
        if (modal) {
            const messageEl = document.getElementById('confirm-message');
            const yesBtn = document.getElementById('confirm-yes');
            const noBtn = document.getElementById('confirm-no');
            
            messageEl.textContent = message;
            modal.classList.add('show');
            
            const handleYes = () => {
                modal.classList.remove('show');
                yesBtn.removeEventListener('click', handleYes);
                noBtn.removeEventListener('click', handleNo);
                callback(true);
            };
            
            const handleNo = () => {
                modal.classList.remove('show');
                yesBtn.removeEventListener('click', handleYes);
                noBtn.removeEventListener('click', handleNo);
                callback(false);
            };
            
            yesBtn.addEventListener('click', handleYes);
            noBtn.addEventListener('click', handleNo);
        } else {
            callback(confirm(message));
        }
    }
}

// üîß ‰øÆÂ§çÂêéÁöÑTokenÁÆ°ÁêÜÁ±ª - Ëß£ÂÜ≥ÈÄíÂΩíÈóÆÈ¢ò
class TokenManager {
    static init() {
        const tokenInput = document.getElementById('github-token');
        
        if (tokenInput) {
            // ÁõëÂê¨TokenËæìÂÖ•
            tokenInput.addEventListener('input', (e) => {
                githubToken = e.target.value.trim();
                updateSaveButton();
                
                // ÁÆÄÂçïÁöÑ‰øùÂ≠òÊèêÁ§∫Ôºå‰∏çËß¶Âèë‰∫ã‰ª∂Âæ™ÁéØ
                if (githubToken && githubToken.length > 20) {
                    this.showTokenSaveHint();
                }
            });
            
            // ÁõëÂê¨ÊµèËßàÂô®Ëá™Âä®Â°´ÂÖÖ
            tokenInput.addEventListener('change', () => {
                setTimeout(() => {
                    if (tokenInput.value && !githubToken) {
                        githubToken = tokenInput.value.trim();
                        if (githubToken) {
                            MessageManager.show('Â∑≤‰ªéÊµèËßàÂô®ÊÅ¢Â§çToken', 'success');
                            updateSaveButton();
                        }
                    }
                }, 100);
            });
            
            // È°µÈù¢Âä†ËΩΩÂêéÂ∞ùËØïÊÅ¢Â§çToken
            setTimeout(() => {
                this.restoreFromBrowser();
            }, 1000);
        }
    }
    
    // ‰øÆÂ§çÔºöÁÆÄÂåñÂØÜÁ†Å‰øùÂ≠òÊèêÁ§∫ÔºåÈÅøÂÖçÈÄíÂΩí
    static showTokenSaveHint() {
        // ÈùôÈªòÊèêÁ§∫ÔºåÈÅøÂÖçÈ¢ëÁπÅÊòæÁ§∫
        if (!this.hintShown) {
            MessageManager.show('üí° ÊµèËßàÂô®‰ºöÊèêÁ§∫‰øùÂ≠òÊ≠§Token', 'info', 2000);
            this.hintShown = true;
        }
    }
    
    // ÂàáÊç¢TokenÊòæÁ§∫/ÈöêËóè
    static toggleTokenVisibility() {
        const tokenInput = document.getElementById('github-token');
        const toggleBtn = document.getElementById('toggle-token-btn');
        
        if (tokenInput && toggleBtn) {
            isTokenVisible = !isTokenVisible;
            
            tokenInput.type = isTokenVisible ? 'text' : 'password';
            toggleBtn.textContent = isTokenVisible ? 'üôà ÈöêËóè' : 'üëÅÔ∏è ÊòæÁ§∫';
            toggleBtn.title = isTokenVisible ? 'ÈöêËóèToken' : 'ÊòæÁ§∫Token';
        }
    }
    
    static clearToken() {
        const tokenInput = document.getElementById('github-token');
        if (tokenInput) {
            tokenInput.value = '';
        }
        githubToken = '';
        updateSaveButton();
        MessageManager.show('TokenÂ∑≤Ê∏ÖÈô§', 'info');
    }
    
    // ‰ªéÊµèËßàÂô®ÂØÜÁ†ÅÁÆ°ÁêÜÂô®ÊÅ¢Â§çToken
    static restoreFromBrowser() {
        const tokenInput = document.getElementById('github-token');
        if (tokenInput && tokenInput.value) {
            githubToken = tokenInput.value.trim();
            if (githubToken) {
                MessageManager.show('‚úÖ Â∑≤‰ªéÊµèËßàÂô®ÊÅ¢Â§çToken', 'success');
                updateSaveButton();
                return true;
            }
        }
        return false;
    }
}

// Áä∂ÊÄÅÁÆ°ÁêÜÁ±ª
class StatusManager {
    static setLoading(loading) {
        const buttons = ['load-btn', 'save-btn', 'format-btn', 'minify-btn', 'validate-btn'];
        buttons.forEach(id => {
            const btn = document.getElementById(id);
            if (btn) {
                btn.disabled = loading;
                if (loading) {
                    btn.classList.add('loading');
                } else {
                    btn.classList.remove('loading');
                }
            }
        });
    }
    
    static updateFileInfo(info) {
        if (info.size !== undefined) {
            const sizeEl = document.getElementById('file-size');
            if (sizeEl) sizeEl.textContent = Utils.formatFileSize(info.size);
        }
        
        if (info.lastSaved) {
            const savedEl = document.getElementById('last-saved');
            if (savedEl) savedEl.textContent = `ÊúÄÂêé‰øùÂ≠ò: ${info.lastSaved}`;
        }
        
        if (info.lastModified) {
            const statusEl = document.getElementById('file-status');
            if (statusEl) statusEl.textContent = `SHA: ${info.lastModified.substring(0, 7)}`;
        }
    }
    
    static updateValidationStatus(isValid, message = '') {
        const statusEl = document.getElementById('validation-status');
        if (statusEl) {
            if (isValid) {
                statusEl.textContent = '‚úÖ JSONÊ†ºÂºèÊ≠£Á°Æ';
                statusEl.className = 'validation-status valid';
            } else {
                statusEl.textContent = `‚ùå ${message}`;
                statusEl.className = 'validation-status invalid';
            }
        }
    }
    
    static updateStats() {
        if (!editorLoaded || !editor) return;
        
        const content = editor.getValue();
        const lines = content.split('\n').length;
        const chars = content.length;
        
        const charEl = document.getElementById('character-count');
        const lineEl = document.getElementById('line-count');
        
        if (charEl) charEl.textContent = `Â≠óÁ¨¶: ${chars}`;
        if (lineEl) lineEl.textContent = `Ë°åÊï∞: ${lines}`;
        
        const blob = new Blob([content]);
        StatusManager.updateFileInfo({ size: blob.size });
    }
}

// GitHub APIÁ±ª
class GitHubAPI {
    static async loadConfig() {
        if (!githubToken) {
            MessageManager.show('ËØ∑ÂÖàËæìÂÖ•GitHub Token', 'error');
            return false;
        }
        
        if (!editorLoaded) {
            MessageManager.show('ÁºñËæëÂô®Â∞öÊú™Âä†ËΩΩÂÆåÊàêÔºåËØ∑Á®çÂêéÂÜçËØï', 'warning');
            return false;
        }
        
        try {
            StatusManager.setLoading(true);
            MessageManager.show('Ê≠£Âú®‰ªéGitHubÂä†ËΩΩÈÖçÁΩÆ...', 'info');
            
            // üõ†Ô∏è ‰ΩøÁî®ÁúüÂÆûÁöÑGitHub API URL
            const url = `https://api.github.com/repos/${GITHUB_CONFIG.owner}/${GITHUB_CONFIG.repo}/contents/${GITHUB_CONFIG.path}`;
            
            const response = await fetch(url, {
                headers: {
                    'Authorization': `token ${githubToken}`,
                    'Accept': 'application/vnd.github.v3+json',
                    'User-Agent': 'Luna-TV-Config-Editor/1.0'
                }
            });
            
            if (!response.ok) {
                throw new Error(this.getErrorMessage(response.status));
            }
            
            const data = await response.json();
            currentSha = data.sha;
            
            const content = Utils.decodeBase64Unicode(data.content);
            
            try {
                JSON.parse(content);
                currentConfig = content;
                
                if (editor && editor.setValue) {
                    editor.setValue(content);
                    
                    setTimeout(() => {
                        if (editor.getAction) {
                            editor.getAction('editor.action.formatDocument').run();
                        }
                    }, 100);
                }
                
                StatusManager.updateFileInfo({ size: data.size, lastModified: data.sha });
                MessageManager.show('‚úÖ ÈÖçÁΩÆÊñá‰ª∂Âä†ËΩΩÊàêÂäüÔºÅ', 'success');
                return true;
                
            } catch (jsonError) {
                const translatedError = Utils.translateJsonError(jsonError);
                MessageManager.show(`JSONÊ†ºÂºèÈîôËØØ: ${translatedError}`, 'error');
                if (editor && editor.setValue) {
                    editor.setValue(content);
                }
                return false;
            }
            
        } catch (error) {
            MessageManager.show(`‚ùå Âä†ËΩΩÂ§±Ë¥•: ${error.message}`, 'error');
            return false;
        } finally {
            StatusManager.setLoading(false);
        }
    }
    
    static async saveConfig() {
        if (!githubToken) {
            MessageManager.show('ËØ∑ÂÖàÂä†ËΩΩÈÖçÁΩÆÊñá‰ª∂', 'error');
            return false;
        }
        
        if (!editorLoaded || !editor) {
            MessageManager.show('ÁºñËæëÂô®Â∞öÊú™Âä†ËΩΩÂÆåÊàê', 'error');
            return false;
        }
        
        const content = editor.getValue();
        
        try {
            JSON.parse(content);
        } catch (error) {
            const translatedError = Utils.translateJsonError(error);
            MessageManager.show(`‚ùå ‰øùÂ≠òÂ§±Ë¥•Ôºö${translatedError}`, 'error');
            return false;
        }
        
        if (content === currentConfig) {
            MessageManager.show('Êñá‰ª∂Êú™ÂèëÁîüÂèòÂåñÔºåÊó†ÈúÄ‰øùÂ≠ò', 'info');
            return false;
        }
        
        try {
            StatusManager.setLoading(true);
            MessageManager.show('Ê≠£Âú®‰øùÂ≠òÂà∞GitHub...', 'info');
            
            // üõ†Ô∏è ‰ΩøÁî®ÁúüÂÆûÁöÑGitHub API URL
            const url = `https://api.github.com/repos/${GITHUB_CONFIG.owner}/${GITHUB_CONFIG.repo}/contents/${GITHUB_CONFIG.path}`;
            const encodedContent = Utils.encodeBase64Unicode(content);
            
            const response = await fetch(url, {
                method: 'PUT',
                headers: {
                    'Authorization': `token ${githubToken}`,
                    'Accept': 'application/vnd.github.v3+json',
                    'User-Agent': 'Luna-TV-Config-Editor/1.0',
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    message: `üåô ÈÄöËøáWebÁºñËæëÂô®Êõ¥Êñ∞ÈÖçÁΩÆ - ${Utils.getTimestamp()}`,
                    content: encodedContent,
                    sha: currentSha,
                    branch: GITHUB_CONFIG.branch
                })
            });
            
            if (!response.ok) {
                const errorData = await response.json();
                throw new Error(`‰øùÂ≠òÂ§±Ë¥• (${response.status}): ${errorData.message || response.statusText}`);
            }
            
            const savedData = await response.json();
            currentSha = savedData.content.sha;
            currentConfig = content;
            
            StatusManager.updateFileInfo({
                size: new Blob([content]).size,
                lastSaved: Utils.getTimestamp()
            });
            
            MessageManager.show('‚úÖ ÈÖçÁΩÆÊñá‰ª∂‰øùÂ≠òÊàêÂäüÔºÅ', 'success');
            return true;
            
        } catch (error) {
            MessageManager.show(`‚ùå ‰øùÂ≠òÂ§±Ë¥•: ${error.message}`, 'error');
            return false;
        } finally {
            StatusManager.setLoading(false);
        }
    }
    
    static getErrorMessage(status) {
        const messages = {
            401: 'TokenÈ™åËØÅÂ§±Ë¥•ÔºåËØ∑Ê£ÄÊü•TokenÊùÉÈôêÊòØÂê¶ÂåÖÂê´repoËÆøÈóÆÊùÉÈôê',
            403: 'APIËÆøÈóÆË¢´ÊãíÁªùÔºåÂèØËÉΩÊòØËÆøÈóÆÈ¢ëÁéáÈôêÂà∂',
            404: 'Êñá‰ª∂Êú™ÊâæÂà∞ÔºåËØ∑Á°ÆËÆ§‰ªìÂ∫ìÂíåÊñá‰ª∂Ë∑ØÂæÑÊ≠£Á°Æ',
            422: 'ËØ∑Ê±ÇÂèÇÊï∞Êó†Êïà',
            500: 'GitHubÊúçÂä°Âô®ÈîôËØØ'
        };
        
        return messages[status] || `ËØ∑Ê±ÇÂ§±Ë¥• (${status})`;
    }
}

// JSONÊìç‰ΩúÁ±ª
class JSONOperations {
    static format() {
        if (!editorLoaded || !editor) {
            MessageManager.show('ÁºñËæëÂô®Â∞öÊú™Âä†ËΩΩÂÆåÊàê', 'error');
            return;
        }
        
        try {
            const content = editor.getValue();
            const parsed = JSON.parse(content);
            const formatted = JSON.stringify(parsed, null, 2);
            editor.setValue(formatted);
            MessageManager.show('‚úÖ JSONÊ†ºÂºèÂåñÂÆåÊàê', 'success');
        } catch (error) {
            const translatedError = Utils.translateJsonError(error);
            MessageManager.show(`‚ùå Ê†ºÂºèÂåñÂ§±Ë¥•: ${translatedError}`, 'error');
        }
    }
    
    static minify() {
        if (!editorLoaded || !editor) {
            MessageManager.show('ÁºñËæëÂô®Â∞öÊú™Âä†ËΩΩÂÆåÊàê', 'error');
            return;
        }
        
        try {
            const content = editor.getValue();
            const parsed = JSON.parse(content);
            const minified = JSON.stringify(parsed);
            editor.setValue(minified);
            MessageManager.show('‚úÖ JSONÂéãÁº©ÂÆåÊàê', 'success');
        } catch (error) {
            const translatedError = Utils.translateJsonError(error);
            MessageManager.show(`‚ùå ÂéãÁº©Â§±Ë¥•: ${translatedError}`, 'error');
        }
    }
    
    static validate() {
        if (!editorLoaded || !editor) {
            MessageManager.show('ÁºñËæëÂô®Â∞öÊú™Âä†ËΩΩÂÆåÊàê', 'error');
            return false;
        }
        
        try {
            const content = editor.getValue();
            JSON.parse(content);
            StatusManager.updateValidationStatus(true);
            MessageManager.show('‚úÖ JSONÊ†ºÂºèÈ™åËØÅÈÄöËøá', 'success');
            return true;
        } catch (error) {
            const translatedError = Utils.translateJsonError(error);
            StatusManager.updateValidationStatus(false, translatedError);
            MessageManager.show(`‚ùå JSONÊ†ºÂºèÈîôËØØ: ${translatedError}`, 'error');
            return false;
        }
    }
    
    static clear() {
        if (!editorLoaded || !editor) {
            MessageManager.show('ÁºñËæëÂô®Â∞öÊú™Âä†ËΩΩÂÆåÊàê', 'error');
            return;
        }
        
        MessageManager.confirm('Á°ÆËÆ§Ê∏ÖÁ©∫ÁºñËæëÂô®ÂÜÖÂÆπÂêóÔºü', (confirmed) => {
            if (confirmed) {
                editor.setValue('{}');
                MessageManager.show('ÁºñËæëÂô®Â∑≤Ê∏ÖÁ©∫', 'info');
            }
        });
    }
}

// Êñá‰ª∂Êìç‰ΩúÁ±ª
class FileOperations {
    static upload() {
        const input = document.getElementById('file-input');
        input.click();
    }
    
    static handleFileUpload(event) {
        const file = event.target.files[0];
        if (!file) return;
        
        if (!file.name.endsWith('.json')) {
            MessageManager.show('ËØ∑ÈÄâÊã©JSONÊñá‰ª∂', 'error');
            return;
        }
        
        const reader = new FileReader();
        reader.onload = (e) => {
            try {
                const content = e.target.result;
                JSON.parse(content);
                editor.setValue(content);
                MessageManager.show(`‚úÖ Êñá‰ª∂ "${file.name}" ‰∏ä‰º†ÊàêÂäü`, 'success');
            } catch (error) {
                const translatedError = Utils.translateJsonError(error);
                MessageManager.show(`‚ùå Êñá‰ª∂Ê†ºÂºèÈîôËØØ: ${translatedError}`, 'error');
            }
        };
        
        reader.readAsText(file);
        event.target.value = '';
    }
    
    static download() {
        if (!editorLoaded || !editor) {
            MessageManager.show('ÁºñËæëÂô®Â∞öÊú™Âä†ËΩΩÂÆåÊàê', 'error');
            return;
        }
        
        try {
            const content = editor.getValue();
            JSON.parse(content);
            
            const blob = new Blob([content], { type: 'application/json' });
            const url = URL.createObjectURL(blob);
            
            const a = document.createElement('a');
            a.href = url;
            a.download = `luna-tv-config-${Date.now()}.json`;
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
            
            URL.revokeObjectURL(url);
            MessageManager.show('‚úÖ Êñá‰ª∂‰∏ãËΩΩÊàêÂäü', 'success');
        } catch (error) {
            const translatedError = Utils.translateJsonError(error);
            MessageManager.show(`‚ùå ‰∏ãËΩΩÂ§±Ë¥•: ${translatedError}`, 'error');
        }
    }
}

// ÁºñËæëÂô®ÊéßÂà∂ÂäüËÉΩ
class EditorControls {
    // ÂÖ®Â±èÂäüËÉΩ
    static toggleFullscreen() {
        if (!editorLoaded || !editor) {
            MessageManager.show('ÁºñËæëÂô®Â∞öÊú™Âä†ËΩΩÂÆåÊàê', 'error');
            return;
        }
        
        const appContainer = document.querySelector('.app-container');
        const fullscreenBtn = document.getElementById('fullscreen-btn');
        
        if (!document.fullscreenElement) {
            appContainer.requestFullscreen().then(() => {
                fullscreenBtn.textContent = 'üîç ÈÄÄÂá∫ÂÖ®Â±è';
                fullscreenBtn.title = 'ÈÄÄÂá∫ÂÖ®Â±èÊ®°Âºè';
                MessageManager.show('Â∑≤ËøõÂÖ•ÂÖ®Â±èÊ®°ÂºèÔºåÊåâESCÈîÆÈÄÄÂá∫', 'success');
                
                setTimeout(() => {
                    if (editor) {
                        editor.layout();
                    }
                }, 100);
            }).catch(() => {
                MessageManager.show('Êó†Ê≥ïËøõÂÖ•ÂÖ®Â±èÊ®°Âºè', 'error');
            });
        } else {
            document.exitFullscreen().then(() => {
                fullscreenBtn.textContent = 'üîç ÂÖ®Â±è';
                fullscreenBtn.title = 'ÂÖ®Â±èÊ®°Âºè';
                MessageManager.show('Â∑≤ÈÄÄÂá∫ÂÖ®Â±èÊ®°Âºè', 'info');
                
                setTimeout(() => {
                    if (editor) {
                        editor.layout();
                    }
                }, 100);
            });
        }
    }
    
    // Â§çÂà∂ÂäüËÉΩ
    static copyContent() {
        if (!editorLoaded || !editor) {
            MessageManager.show('ÁºñËæëÂô®Â∞öÊú™Âä†ËΩΩÂÆåÊàê', 'error');
            return;
        }
        
        try {
            const content = editor.getValue();
            
            if (navigator.clipboard && navigator.clipboard.writeText) {
                navigator.clipboard.writeText(content).then(() => {
                    MessageManager.show('‚úÖ ÂÜÖÂÆπÂ∑≤Â§çÂà∂Âà∞Ââ™Ë¥¥Êùø', 'success');
                }).catch(() => {
                    this.fallbackCopy(content);
                });
            } else {
                this.fallbackCopy(content);
            }
        } catch (error) {
            MessageManager.show(`‚ùå Â§çÂà∂Â§±Ë¥•: ${error.message}`, 'error');
        }
    }
    
    // ÈôçÁ∫ßÂ§çÂà∂ÊñπÊ≥ï
    static fallbackCopy(content) {
        try {
            const textArea = document.createElement('textarea');
            textArea.value = content;
            textArea.style.position = 'fixed';
            textArea.style.top = '-9999px';
            textArea.style.left = '-9999px';
            
            document.body.appendChild(textArea);
            textArea.focus();
            textArea.select();
            
            const successful = document.execCommand('copy');
            document.body.removeChild(textArea);
            
            if (successful) {
                MessageManager.show('‚úÖ ÂÜÖÂÆπÂ∑≤Â§çÂà∂Âà∞Ââ™Ë¥¥Êùø', 'success');
            } else {
                MessageManager.show('‚ùå Â§çÂà∂Â§±Ë¥•ÔºåËØ∑ÊâãÂä®Â§çÂà∂ÂÜÖÂÆπ', 'error');
            }
        } catch (error) {
            MessageManager.show('‚ùå Â§çÂà∂Â§±Ë¥•ÔºåËØ∑ÊâãÂä®Â§çÂà∂ÂÜÖÂÆπ', 'error');
        }
    }
    
    // Êü•ÊâæÂäüËÉΩ
    static openSearch() {
        if (!editorLoaded || !editor) {
            MessageManager.show('ÁºñËæëÂô®Â∞öÊú™Âä†ËΩΩÂÆåÊàê', 'error');
            return;
        }
        
        try {
            if (editor.getAction) {
                const searchAction = editor.getAction('actions.find');
                if (searchAction) {
                    searchAction.run();
                    MessageManager.show('‚úÖ ÊêúÁ¥¢ÂäüËÉΩÂ∑≤ÊâìÂºÄ', 'info');
                } else {
                    MessageManager.show('‚ö†Ô∏è ÊêúÁ¥¢ÂäüËÉΩ‰∏çÂèØÁî®', 'warning');
                }
            } else {
                MessageManager.show('‚ùå ÁºñËæëÂô®ÂäüËÉΩ‰∏çÂÆåÊï¥', 'error');
            }
        } catch (error) {
            MessageManager.show(`‚ùå ÊâìÂºÄÊêúÁ¥¢Â§±Ë¥•: ${error.message}`, 'error');
        }
    }
}

// üõ†Ô∏è ‰øÆÂ§çÂêéÁöÑMonacoÁºñËæëÂô®ÂàùÂßãÂåñ
function initializeEditor() {
    console.log('üõ†Ô∏è ÂºÄÂßãÂàùÂßãÂåñMonacoÁºñËæëÂô®ÔºàÂÆåÊï¥‰øÆÂ§çÁâàÔºâ');
    
    // ÂÜçÊ¨°Á°Æ‰øùÂÖºÂÆπÊÄß‰øÆÂ§çÂ∑≤Â∫îÁî®
    fixKeyboardEventCompatibility();
    
    if (typeof monaco !== 'undefined') {
        createEditor();
        return;
    }
    
    // üõ†Ô∏è ‰ΩøÁî®ÁúüÂÆûÁöÑMonacoÁºñËæëÂô®CDNÂú∞ÂùÄ
    if (typeof require !== 'undefined') {
        require.config({ 
            paths: { 
                'vs': 'https://cdn.jsdelivr.net/npm/monaco-editor@0.34.1/min/vs' 
            }
        });
        
        require(['vs/editor/editor.main'], function () {
            console.log('‚úÖ MonacoÁºñËæëÂô®Ê®°ÂùóÂä†ËΩΩÊàêÂäü');
            createEditor();
        });
    } else {
        MessageManager.show('‚ùå MonacoÁºñËæëÂô®Âä†ËΩΩÂô®Êú™ÊâæÂà∞ÔºåËØ∑Âà∑Êñ∞È°µÈù¢ÈáçËØï', 'error');
    }
}

function createEditor() {
    const editorContainer = document.getElementById('json-editor');
    if (!editorContainer) {
        MessageManager.show('‚ùå ÁºñËæëÂô®ÂÆπÂô®Êú™ÊâæÂà∞', 'error');
        return;
    }
    
    try {
        console.log('üõ†Ô∏è ÂàõÂª∫MonacoÁºñËæëÂô®ÂÆû‰æã...');
        
        // ÊúÄÂêé‰∏ÄÊ¨°Á°Æ‰øùÂÖºÂÆπÊÄß‰øÆÂ§ç
        fixKeyboardEventCompatibility();
        
        editor = monaco.editor.create(editorContainer, {
            value: `{
  "message": "Ê¨¢Ëøé‰ΩøÁî®Luna TVÈÖçÁΩÆÁºñËæëÂô® - ÂÆåÊï¥‰øÆÂ§çÁâà",
  "description": "ÊâÄÊúâCDNÂíåÂÖºÂÆπÊÄßÈóÆÈ¢òÂ∑≤‰øÆÂ§ç",
  "fixes": [
    "‚úÖ ‰øÆÂ§çTokenManagerÈÄíÂΩíÈîôËØØ",
    "‚úÖ ÁúüÊ≠£ÁöÑÂèØ‰∫§‰∫íÊ†ëÁä∂ËßÜÂõæ",
    "‚úÖ Âå∫ÂàÜÈ¢ÑËßàÂíåÊ†ëÁä∂ËßÜÂõæÂäüËÉΩ",
    "üõ†Ô∏è ‰øÆÂ§çt.getModifierStateÈîôËØØ",
    "üõ†Ô∏è ‰ΩøÁî®ÁúüÂÆûCDNÂú∞ÂùÄÔºå‰∏çÂÜç404",
    "üõ†Ô∏è ‰øÆÂ§çGitHub API URLÈóÆÈ¢ò"
  ],
  "features": {
    "editor": "MonacoÁºñËæëÂô® - ‰øÆÂ§çÈîÆÁõò‰∫ã‰ª∂",
    "tree": "Ê†ëÁä∂ËßÜÂõæ - ÂèØ‰∫§‰∫íÁöÑÊ†ëÂΩ¢ÁªìÊûÑ",
    "preview": "È¢ÑËßàËßÜÂõæ - Á∫ØÊñáÊú¨Ê†ºÂºèÂåñÊòæÁ§∫",
    "github": "GitHubÂêåÊ≠•ÂäüËÉΩ - ‰øÆÂ§çAPI URL",
    "validation": "JSONÈ™åËØÅÂíåÈîôËØØÊèêÁ§∫"
  },
  "compatibility": {
    "keyboard_events": "Â∑≤‰øÆÂ§çgetModifierStateÊñπÊ≥ï",
    "cdn_urls": "‰ΩøÁî®ÁúüÂÆûCDNÂú∞ÂùÄÔºå‰∏çÂÜçÂá∫Áé∞404ÈîôËØØ",
    "github_api": "‰ΩøÁî®Ê≠£Á°ÆÁöÑGitHub APIÁ´ØÁÇπ",
    "browser_support": "Â¢ûÂº∫ÊµèËßàÂô®ÂÖºÂÆπÊÄß"
  },
  "status": "ÂÖ®ÈÉ®ÂäüËÉΩÊ≠£Â∏∏ÔºåÂèØ‰ª•ÂºÄÂßã‰ΩøÁî®ÔºÅ"
}`,
            language: 'json',
            theme: 'vs-dark',
            automaticLayout: true,
            fontSize: 14,
            lineNumbers: 'on',
            minimap: { enabled: false },
            wordWrap: 'on',
            formatOnPaste: true,
            formatOnType: true,
            scrollBeyondLastLine: false,
            renderWhitespace: 'selection',
            smoothScrolling: true,
            cursorBlinking: 'smooth',
            folding: true,
            bracketPairColorization: { enabled: true },
            // üõ†Ô∏è Ê∑ªÂä†ÂÖºÂÆπÊÄßÈÄâÈ°πÔºåÂáèÂ∞ëÈîÆÁõò‰∫ã‰ª∂Â§ÑÁêÜ
            quickSuggestions: false,
            parameterHints: { enabled: false },
            suggest: { showKeywords: false },
            hover: { enabled: false }
        });
        
        console.log('‚úÖ MonacoÁºñËæëÂô®ÂÆû‰æãÂàõÂª∫ÊàêÂäü');
        
        // ÁõëÂê¨ÂÜÖÂÆπÂèòÂåñ
        editor.onDidChangeModelContent(() => {
            if (editorLoaded) {
                JSONOperations.validate();
                StatusManager.updateStats();
                updateSaveButton();
            }
        });
        
        // ÁõëÂê¨ÂÖâÊ†á‰ΩçÁΩÆÂèòÂåñ
        editor.onDidChangeCursorPosition((e) => {
            const positionEl = document.getElementById('cursor-position');
            if (positionEl) {
                positionEl.textContent = `Ë°å: ${e.position.lineNumber}, Âàó: ${e.position.column}`;
            }
        });
        
        editorLoaded = true;
        MessageManager.show('üõ†Ô∏è ÁºñËæëÂô®ÂàùÂßãÂåñÂÆåÊàêÔºåÊâÄÊúâÈóÆÈ¢òÂ∑≤‰øÆÂ§çÔºÅ', 'success');
        
    } catch (error) {
        MessageManager.show(`‚ùå ÁºñËæëÂô®ÂàõÂª∫Â§±Ë¥•: ${error.message}`, 'error');
        console.error('ÁºñËæëÂô®ÂàõÂª∫Â§±Ë¥•:', error);
    }
}

function updateSaveButton() {
    const saveBtn = document.getElementById('save-btn');
    if (!saveBtn || !editor || !githubToken) {
        if (saveBtn) saveBtn.disabled = true;
        return;
    }
    
    const hasChanges = editor.getValue() !== currentConfig;
    saveBtn.disabled = !hasChanges;
    saveBtn.textContent = hasChanges ? 'üíæ ‰øùÂ≠òÈÖçÁΩÆ *' : 'üíæ ‰øùÂ≠òÈÖçÁΩÆ';
}

// Ê†áÁ≠æÈ°µÂàáÊç¢
function switchTab(tabName) {
    document.querySelectorAll('.tab-content').forEach(tab => {
        tab.classList.remove('active');
    });
    
    document.querySelectorAll('.tab-btn').forEach(btn => {
        btn.classList.remove('active');
    });
    
    document.getElementById(`${tabName}-tab`).classList.add('active');
    document.querySelector(`[data-tab="${tabName}"]`).classList.add('active');
    
    // üå≥ ÊòæÁ§∫/ÈöêËóèÊ†ëÁä∂ËßÜÂõæÊéßÂà∂ÊåâÈíÆ
    const expandBtn = document.getElementById('expand-all-btn');
    const collapseBtn = document.getElementById('collapse-all-btn');
    
    if (expandBtn && collapseBtn) {
        if (tabName === 'tree') {
            expandBtn.style.display = 'block';
            collapseBtn.style.display = 'block';
        } else {
            expandBtn.style.display = 'none';
            collapseBtn.style.display = 'none';
        }
    }
    
    if (tabName === 'editor' && editor) {
        setTimeout(() => editor.layout(), 100);
    }
    
    if (tabName === 'tree') {
        updateTreeView();
    }
    
    if (tabName === 'preview') {
        updatePreview();
    }
}

// üå≥ Êõ¥Êñ∞ÁúüÊ≠£ÁöÑÊ†ëÁä∂ËßÜÂõæ - ÂèØ‰∫§‰∫íÊ†ëÂΩ¢ÁªìÊûÑ
function updateTreeView() {
    const treeContainer = document.getElementById('json-tree');
    if (!treeContainer || !editor) return;
    
    try {
        const content = editor.getValue();
        const parsed = JSON.parse(content);
        treeContainer.innerHTML = '';
        
        const treeElement = createTreeView(parsed, 'root');
        treeContainer.appendChild(treeElement);
        
    } catch (error) {
        treeContainer.innerHTML = '<div class="error-message">JSONÊ†ºÂºèÈîôËØØÔºåÊó†Ê≥ïÁîüÊàêÊ†ëÁä∂ËßÜÂõæ</div>';
    }
}

// üå≥ ÂàõÂª∫ÂèØ‰∫§‰∫íÁöÑÊ†ëÂΩ¢ËßÜÂõæ
function createTreeView(data, key = '', level = 0) {
    const container = document.createElement('div');
    container.className = 'tree-node';
    container.style.marginLeft = `${level * 20}px`;
    
    if (Array.isArray(data)) {
        // Â§ÑÁêÜÊï∞ÁªÑ
        const header = document.createElement('div');
        header.className = 'tree-header array-header';
        header.innerHTML = `
            <span class="tree-toggle">‚ñº</span>
            <span class="tree-key">${key}</span>
            <span class="tree-type">[Array(${data.length})]</span>
        `;
        
        const content = document.createElement('div');
        content.className = 'tree-content';
        
        data.forEach((item, index) => {
            const child = createTreeView(item, `[${index}]`, level + 1);
            content.appendChild(child);
        });
        
        header.addEventListener('click', () => toggleTreeNode(header, content));
        container.appendChild(header);
        container.appendChild(content);
        
    } else if (data !== null && typeof data === 'object') {
        // Â§ÑÁêÜÂØπË±°
        const keys = Object.keys(data);
        const header = document.createElement('div');
        header.className = 'tree-header object-header';
        header.innerHTML = `
            <span class="tree-toggle">‚ñº</span>
            <span class="tree-key">${key}</span>
            <span class="tree-type">{Object(${keys.length})}</span>
        `;
        
        const content = document.createElement('div');
        content.className = 'tree-content';
        
        keys.forEach(objKey => {
            const child = createTreeView(data[objKey], objKey, level + 1);
            content.appendChild(child);
        });
        
        header.addEventListener('click', () => toggleTreeNode(header, content));
        container.appendChild(header);
        container.appendChild(content);
        
    } else {
        // Â§ÑÁêÜÂü∫Êú¨Á±ªÂûãÂÄº
        const leaf = document.createElement('div');
        leaf.className = 'tree-leaf';
        
        let valueClass = 'tree-value';
        let displayValue = String(data);
        
        if (data === null) {
            valueClass += ' null-value';
            displayValue = 'null';
        } else if (typeof data === 'string') {
            valueClass += ' string-value';
            displayValue = `"${data}"`;
        } else if (typeof data === 'number') {
            valueClass += ' number-value';
        } else if (typeof data === 'boolean') {
            valueClass += ' boolean-value';
        }
        
        leaf.innerHTML = `
            <span class="tree-key">${key}:</span>
            <span class="${valueClass}">${displayValue}</span>
        `;
        
        container.appendChild(leaf);
    }
    
    return container;
}

// üîÑ ÂàáÊç¢Ê†ëËäÇÁÇπÂ±ïÂºÄ/Êî∂Ëµ∑
function toggleTreeNode(header, content) {
    const toggle = header.querySelector('.tree-toggle');
    const isExpanded = content.style.display !== 'none';
    
    if (isExpanded) {
        content.style.display = 'none';
        toggle.textContent = '‚ñ∂';
        header.classList.add('collapsed');
    } else {
        content.style.display = 'block';
        toggle.textContent = '‚ñº';
        header.classList.remove('collapsed');
    }
}

// üå≥ Â±ïÂºÄÊâÄÊúâÊ†ëËäÇÁÇπ
function expandAllTreeNodes() {
    const treeContainer = document.getElementById('json-tree');
    if (treeContainer) {
        const headers = treeContainer.querySelectorAll('.tree-header');
        const contents = treeContainer.querySelectorAll('.tree-content');
        
        headers.forEach(header => {
            const toggle = header.querySelector('.tree-toggle');
            if (toggle) {
                toggle.textContent = '‚ñº';
                header.classList.remove('collapsed');
            }
        });
        
        contents.forEach(content => {
            content.style.display = 'block';
        });
        
        MessageManager.show('‚úÖ ÊâÄÊúâËäÇÁÇπÂ∑≤Â±ïÂºÄ', 'info');
    }
}

// üå≥ Êî∂Ëµ∑ÊâÄÊúâÊ†ëËäÇÁÇπ
function collapseAllTreeNodes() {
    const treeContainer = document.getElementById('json-tree');
    if (treeContainer) {
        const headers = treeContainer.querySelectorAll('.tree-header');
        const contents = treeContainer.querySelectorAll('.tree-content');
        
        headers.forEach(header => {
            const toggle = header.querySelector('.tree-toggle');
            if (toggle) {
                toggle.textContent = '‚ñ∂';
                header.classList.add('collapsed');
            }
        });
        
        contents.forEach(content => {
            content.style.display = 'none';
        });
        
        MessageManager.show('‚úÖ ÊâÄÊúâËäÇÁÇπÂ∑≤Êî∂Ëµ∑', 'info');
    }
}

// üëÅÔ∏è Êõ¥Êñ∞È¢ÑËßàÂÜÖÂÆπ - Á∫ØÊñáÊú¨Ê†ºÂºèÂåñÊòæÁ§∫
function updatePreview() {
    const previewContent = document.getElementById('json-preview-content');
    if (!previewContent || !editor) return;
    
    try {
        const content = editor.getValue();
        const parsed = JSON.parse(content);
        previewContent.textContent = JSON.stringify(parsed, null, 2);
    } catch (error) {
        previewContent.textContent = `JSONÊ†ºÂºèÈîôËØØÔºåÊó†Ê≥ïÁîüÊàêÈ¢ÑËßà:\n${error.message}`;
    }
}

// üõ†Ô∏è ‰∫ã‰ª∂ÁõëÂê¨Âô®ËÆæÁΩÆÔºà‰øÆÂ§çÁâàÊú¨Ôºâ
function setupEventListeners() {
    // Âü∫Á°ÄÊåâÈíÆ‰∫ã‰ª∂
    const buttons = [
        { id: 'load-btn', handler: GitHubAPI.loadConfig },
        { id: 'save-btn', handler: GitHubAPI.saveConfig },
        { id: 'clear-token-btn', handler: TokenManager.clearToken },
        { id: 'toggle-token-btn', handler: TokenManager.toggleTokenVisibility },
        { id: 'upload-btn', handler: FileOperations.upload },
        { id: 'download-btn', handler: FileOperations.download },
        { id: 'format-btn', handler: JSONOperations.format },
        { id: 'minify-btn', handler: JSONOperations.minify },
        { id: 'validate-btn', handler: JSONOperations.validate },
        { id: 'clear-btn', handler: JSONOperations.clear }
    ];
    
    buttons.forEach(({ id, handler }) => {
        const btn = document.getElementById(id);
        if (btn) {
            btn.addEventListener('click', handler);
        }
    });
    
    // ÁºñËæëÂô®ÊéßÂà∂ÊåâÈíÆ
    const fullscreenBtn = document.getElementById('fullscreen-btn');
    if (fullscreenBtn) {
        fullscreenBtn.addEventListener('click', EditorControls.toggleFullscreen);
    }
    
    const copyBtn = document.getElementById('copy-btn');
    if (copyBtn) {
        copyBtn.addEventListener('click', EditorControls.copyContent);
    }
    
    const searchBtn = document.getElementById('search-btn');
    if (searchBtn) {
        searchBtn.addEventListener('click', EditorControls.openSearch);
    }
    
    // üå≥ Ê†ëÁä∂ËßÜÂõæÊéßÂà∂ÊåâÈíÆ
    const expandAllBtn = document.getElementById('expand-all-btn');
    if (expandAllBtn) {
        expandAllBtn.addEventListener('click', expandAllTreeNodes);
    }
    
    const collapseAllBtn = document.getElementById('collapse-all-btn');
    if (collapseAllBtn) {
        collapseAllBtn.addEventListener('click', collapseAllTreeNodes);
    }
    
    // Êñá‰ª∂‰∏ä‰º†
    const fileInput = document.getElementById('file-input');
    if (fileInput) {
        fileInput.addEventListener('change', FileOperations.handleFileUpload);
    }
    
    // Ê†áÁ≠æÈ°µÂàáÊç¢
    document.querySelectorAll('.tab-btn').forEach(btn => {
        btn.addEventListener('click', () => {
            switchTab(btn.dataset.tab);
        });
    });
    
    // ÁºñËæëÂô®ÈÄâÈ°π
    const wordWrapToggle = document.getElementById('word-wrap-toggle');
    if (wordWrapToggle) {
        wordWrapToggle.addEventListener('change', (e) => {
            if (editor) {
                editor.updateOptions({ wordWrap: e.target.checked ? 'on' : 'off' });
            }
        });
    }
    
    const minimapToggle = document.getElementById('minimap-toggle');
    if (minimapToggle) {
        minimapToggle.addEventListener('change', (e) => {
            if (editor) {
                editor.updateOptions({ minimap: { enabled: e.target.checked } });
            }
        });
    }
    
    const lineNumbersToggle = document.getElementById('line-numbers-toggle');
    if (lineNumbersToggle) {
        lineNumbersToggle.addEventListener('change', (e) => {
            if (editor) {
                editor.updateOptions({ lineNumbers: e.target.checked ? 'on' : 'off' });
            }
        });
    }
    
    const themeSelect = document.getElementById('theme-select');
    if (themeSelect) {
        themeSelect.addEventListener('change', (e) => {
            if (typeof monaco !== 'undefined') {
                monaco.editor.setTheme(e.target.value);
            }
        });
    }
    
    const fontSizeSlider = document.getElementById('font-size-slider');
    if (fontSizeSlider) {
        fontSizeSlider.addEventListener('input', (e) => {
            const fontSize = parseInt(e.target.value);
            if (editor) {
                editor.updateOptions({ fontSize });
            }
            const valueSpan = document.getElementById('font-size-value');
            if (valueSpan) {
                valueSpan.textContent = `${fontSize}px`;
            }
        });
    }
    
    // ÂÖ®Â±èÁä∂ÊÄÅÁõëÂê¨
    document.addEventListener('fullscreenchange', () => {
        const fullscreenBtn = document.getElementById('fullscreen-btn');
        if (fullscreenBtn) {
            if (document.fullscreenElement) {
                fullscreenBtn.textContent = 'üîç ÈÄÄÂá∫ÂÖ®Â±è';
                fullscreenBtn.title = 'ÈÄÄÂá∫ÂÖ®Â±èÊ®°Âºè';
            } else {
                fullscreenBtn.textContent = 'üîç ÂÖ®Â±è';
                fullscreenBtn.title = 'ÂÖ®Â±èÊ®°Âºè';
            }
        }
    });
    
    // ÈîÆÁõòÂø´Êç∑ÈîÆ
    document.addEventListener('keydown', (e) => {
        if (e.ctrlKey) {
            switch (e.key.toLowerCase()) {
                case 's':
                    e.preventDefault();
                    if (editorLoaded) GitHubAPI.saveConfig();
                    break;
                case 'o':
                    e.preventDefault();
                    if (editorLoaded) GitHubAPI.loadConfig();
                    break;
                case 'u':
                    e.preventDefault();
                    FileOperations.upload();
                    break;
                case 'd':
                    e.preventDefault();
                    FileOperations.download();
                    break;
                case 'f':
                    e.preventDefault();
                    if (editorLoaded) EditorControls.openSearch();
                    break;
                case 'c':
                    if (e.shiftKey) {
                        e.preventDefault();
                        if (editorLoaded) EditorControls.copyContent();
                    }
                    break;
                case 'enter':
                    if (e.altKey) {
                        e.preventDefault();
                        if (editorLoaded) EditorControls.toggleFullscreen();
                    }
                    break;
            }
        }
        
        // ESCÈîÆÈÄÄÂá∫ÂÖ®Â±è
        if (e.key === 'Escape' && document.fullscreenElement) {
            document.exitFullscreen();
        }
    });
}

// Â∫îÁî®ÂàùÂßãÂåñ
function initializeApp() {
    console.log('üõ†Ô∏è Luna TVÈÖçÁΩÆÁºñËæëÂô®ÂêØÂä®‰∏≠ÔºàÂÆåÊï¥‰øÆÂ§çÁâàÔºâ...');
    
    // Á°Æ‰øùÈîÆÁõò‰∫ã‰ª∂ÂÖºÂÆπÊÄß‰øÆÂ§çÂ∑≤Â∫îÁî®
    fixKeyboardEventCompatibility();
    
    // ÂàùÂßãÂåñTokenÁÆ°ÁêÜÔºà‰øÆÂ§çÈÄíÂΩíÁâàÊú¨Ôºâ
    TokenManager.init();
    
    // ÂàùÂßãÂåñÁºñËæëÂô®
    initializeEditor();
    
    // ËÆæÁΩÆ‰∫ã‰ª∂ÁõëÂê¨Âô®
    setupEventListeners();
    
    // ÊòæÁ§∫Ê¨¢ËøéÊ∂àÊÅØ
    setTimeout(() => {
        MessageManager.show('üõ†Ô∏è Luna TVÈÖçÁΩÆÁºñËæëÂô®Â∑≤ÂêØÂä®ÔºåÊâÄÊúâÈóÆÈ¢òÂ∑≤ÂÆåÂÖ®‰øÆÂ§çÔºÅ', 'success');
    }, 1500);
}

// È°µÈù¢Âç∏ËΩΩÂâç‰øùÂ≠òÁä∂ÊÄÅ
window.addEventListener('beforeunload', (e) => {
    if (editor && editor.getValue() !== currentConfig && editor.getValue().trim() !== '') {
        e.preventDefault();
        e.returnValue = 'ÊÇ®ÊúâÊú™‰øùÂ≠òÁöÑÊõ¥ÊîπÔºåÁ°ÆÂÆöË¶ÅÁ¶ªÂºÄÂêóÔºü';
    }
});

// È°µÈù¢Âä†ËΩΩÂÆåÊàêÂêéÂàùÂßãÂåñ
if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initializeApp);
} else {
    initializeApp();
}

console.log('üõ†Ô∏è Luna TVÈÖçÁΩÆÁºñËæëÂô®Â∑≤ÂêØÂä®ÔºåCDNÂíåÂÖºÂÆπÊÄßÈóÆÈ¢òÂ∑≤ÂÆåÂÖ®‰øÆÂ§çÔºÅ');
